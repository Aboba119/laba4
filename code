'''Вариант 14
С клавиатуры вводится два числа K и N. Квадратная матрица А(N,N),
состоящая из 4-х равных по размерам подматриц, B,C,D,E заполняется
случайным образом целыми числами в интервале [-10,10].
Для тестирования использовать не случайное заполнение, а целенаправленное.
d e
c b
Для простоты все индексы в подматрицах относительные.
По сформированной матрице F (или ее частям) необходимо вывести не менее 3 разных графиков.
Программа должна использовать функции библиотек numpy  и mathplotlib #print(int(np.linalg.det(np.array(a))))
Формируется матрица F следующим образом: скопировать в нее А и если в В количество чисел, меньших К в нечетных
столбцах больше, чем сумма чисел в четных строках, то поменять местами С и Е симметрично, иначе В и Е поменять
местами несимметрично. При этом матрица А не меняется. После чего если определитель матрицы А больше суммы
диагональных элементов матрицы F, то вычисляется выражение: A-1*AT – K * F, иначе вычисляется выражение
(A-1 +G-FТ)*K, где G-нижняя треугольная матрица, полученная из А. Выводятся по мере формирования А, F и все
матричные операции последовательно.
'''
from random import randint as rnd
import numpy as np
import matplotlib.pyplot as plt


def printList(z):
    for i in z:
        for j in i:
            print("{:6}".format(round(j, 2)), end=' ')
        print()
    print()


k, n = int(input("k = ")), int(input("Размерность  матрицы(n) =  "))
m = n // 2
n = m * 2
a = []

# Случайное заполнение
'''
for i in range(n):
    a.append([])
    for j in range(n):
        a[i].append(rnd(-10, 10))
'''

new_matrix = open('text.txt', 'r')
for i in range(n):
    new_line = new_matrix.readline().split()
    final_line = [int(j) for j in new_line]
    a.append(final_line)

a_arr = np.array(a)
print("Матрица A : ")
printList(a)

b = []
c = []
d = []
e = []
for i in range(m):
    b.append([])
    c.append([])
    d.append([])
    e.append([])
    for j in range(m):
        b[i].append(a[i + m][j + m])
        c[i].append(a[i + m][j])
        d[i].append(a[i][j])
        e[i].append(a[i][j + m])

print("Матрица B : ")
printList(b)
print("Матрица C : ")
printList(c)
print("Матрица D : ")
printList(d)
print("Матрица E : ")
printList(e)

nums_men_k = 0
for i in range(m):
    for j in range(0, m, 2):
        if b[i][j] < k:
            nums_men_k += 1

sum_ = 0
for i in range(1, m, 2):
    for j in range(m):
        sum_ += b[i][j]

if nums_men_k > sum_:
    print("Количество чисел меньших К в нечетных столбцах ({:1}) больше чем сумма чисел четных строк ({:2})\n".format(nums_men_k, sum_))

    for i in range(m):
        for j in range(m):
            c[i][j], e[i][m - j - 1] = e[i][m - j - 1], c[i][j]
else:
    print("Сумма чисел четных строк ({:1}) больше чем количество чисел меньших К в нечетных столбцах ({:2})\n".format(sum_, nums_men_k))

    for i in range(m):
        for j in range(m):
            b[i][j], e[i][j] = e[i][j], b[i][j]

f = []
f.extend(d)
f.extend(c)
for i in range(m):
    f[i].extend(e[i])
for i in range(m, n):
    f[i].extend(b[i - m])

print("Матрица F : ")
printList(list(f))

deta = np.linalg.det(a_arr)
a_arr_tr = a_arr.transpose()
a_inv = np.linalg.inv(a_arr)

sum_ = 0
for i in range(n):
    sum_ += f[i][i]

if deta > sum_:  # A-1*AT – K * F
    print("Определитель A ({:1}) больше чем сумма главной диагонали F ({:2})\n".format(int(deta), sum_))
    a_arr_inv_mul_trans = np.matmul(np.linalg.inv(a_arr), a_arr_tr)
    print("A-1 * AT : ")
    printList(list(a_arr_inv_mul_trans))

    fk_arr = np.array(f)
    fk_arr *= k
    print("K * F : ")
    printList(list(fk_arr))

    out_ = np.add(a_arr_inv_mul_trans, (-1) * fk_arr)
    print("A-1 * AT – K * F : ")
    printList(list(out_))

else:  # (A-1 +G-FТ)*K
    print("Определитель A ({:1}) меньше чем сумма главной диагонали F ({:2})\n".format(int(deta), sum_))
    print("A-1 : ")
    printList(list(a_inv))

    f_arr_tr = np.array(f)
    f_arr_tr = f_arr_tr.transpose()
    print("FT : ")
    printList(list(f_arr_tr))

    g = np.tril(a_arr, 0)
    print("G : ")
    printList(list(g))

    out_ = np.add(a_inv, g)
    out_ = np.add(out_, (-1) * f_arr_tr)
    out_ *= k
    print("(A-1 + G - FТ) * K : ")
    printList(list(out_))

plt.title("Зависимости: y =sin от элементов F, x = соs от элементов F")
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.plot(np.cos(f), np.sin(f), linestyle="--", color="r")

plt.show()

plt.title("Высота столбца от числа элемента первой строки")
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.bar(range(0, n), f[0], color='r', alpha=0.9)

plt.show()

plt.title("соответсвие номера и квадрата элемента из первой строки ")
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.plot(range(0, n), f[0], linestyle="-", color="g")

plt.show()
